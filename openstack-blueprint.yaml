tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.0.1/plugin.yaml
  - types/gihk_types.yaml
  - imports/gihk-blueprint.yaml

inputs:

  image:
    type: string

  flavor:
    type: string

  agent_user:
    default: ubuntu

  key_name:
    description: >
      the agent public key name (created during manager bootstrap)
    type: string
    default: mongodb-openstack-key

  private_key_path:
    type: string
    default: ~/.ssh/mongodb-openstack-key.pem

  external_network_name:
    default: external

  router_name:
    description: The Router Name

  public_network_name:
    description: The name of the Openstack public network.

  public_subnet_name:
    description: The name of the public network subnet.

  region:
    default: ''

  influxdb_port1: #user port
    default: 8086
    type: string

  influxdb_port2: #admin port
    default: 8083
    type: string

  grafana_port:
    default: 3000
    type: string

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_input: region }

node_templates:

  sg_kafka:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      resource_id: kafka-security-group
      security_group:
        description: Security group for kafka component
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [kafka, kafka_port] }
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [kafka, zookeeper_port] }

  sg_influxdb:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      resource_id: influxdb-security-group
      security_group:
        description: Security group for influxdb component
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_input: influxdb_port1 }
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_input: influxdb_port2 }

  sg_grafana:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      resource_id: grafana-security-group
      security_group:
        description: Security group for grafana component
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_input: grafana_port }

  ssh_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: ssh_security_group
        description: SSH Group
      rules:
        - port: 22
          remote_ip_prefix: 0.0.0.0/0

  public_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  VM:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_config
      resource_id: monitoring_general_server
      agent_config:
        user: { get_input: agent_user }
        key: { get_property: [ key, private_key_path ] }
        install_method: remote
        port: 22
      server:
        image: { get_input: image }
        flavor: { get_input: flavor }
        userdata: |
          #!/bin/bash
          echo 127.0.1.1 $(cat /etc/hostname) | sudo tee -a sudo /etc/hosts >/dev/null
          echo "nameserver 8.8.8.8" | sudo tee -a sudo /etc/resolv.conf > /dev/null
          echo "nameserver 8.8.8.8" | sudo tee -a sudo /etc/resolvconf/resolv.conf.d/base > /dev/null
      management_network_name: { get_property: [ public_network, resource_id ] }
    relationships:
      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: port
        type: cloudify.openstack.server_connected_to_port

  port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: sg_grafana
      - type: cloudify.openstack.port_connected_to_security_group
        target: sg_kafka
      - type: cloudify.openstack.port_connected_to_security_group
        target: sg_influxdb
      - type: cloudify.openstack.port_connected_to_security_group
        target: ssh_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: public_ip

  public_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_subnet_name }
    relationships:
      - target: public_network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_network_name }

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: router_name }
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: external_network_name }

  key:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      openstack_config: *openstack_config
      resource_id: { get_input: key_name }
      private_key_path: { get_input: private_key_path }
