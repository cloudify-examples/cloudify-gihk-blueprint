tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.2/resources/rest-service/cloudify/types/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.4.1.1/plugin.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.1/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.4.1/cloudify_cloudinit/types.yaml
  - types/gihk_types.yaml
  - imports/gihk-blueprint.yaml

inputs:

  image:
    description: >
      An Openstack Image ID. Tested with a Ubuntu 14.04 image.
    default: { get_secret: ubuntu_trusty_image }

  flavor:
    description: >
      An Openstack Flavor ID.
    default: { get_secret: small_image_flavor }

  agent_user:
    description: The user name of the agent on the instance created from the image.
    default: ubuntu

  influxdb_port1: #user port
    default: 8086
    type: string

  influxdb_port2: #admin port
    default: 8083
    type: string

  grafana_port:
    default: 3000
    type: string

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_secret: region }

node_templates:

  sg_kafka:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      resource_id: kafka-security-group
      security_group:
        description: Security group for kafka component
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [kafka, kafka_port] }
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [kafka, zookeeper_port] }

  sg_influxdb:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      resource_id: influxdb-security-group
      security_group:
        description: Security group for influxdb component
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_input: influxdb_port1 }
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_input: influxdb_port2 }

  sg_grafana:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      resource_id: grafana-security-group
      security_group:
        description: Security group for grafana component
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_input: grafana_port }

  ssh_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: ssh_security_group
        description: SSH Group
      rules:
        - port: 22
          remote_ip_prefix: 0.0.0.0/0

  public_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  VM:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_config
      resource_id: monitoring_general_server
      agent_config:
        user: { get_input: agent_user }
        install_method: remote
        port: 22
        key: { get_secret: agent_key_private }
      server:
        key_name: ''
        image: { get_input: image }
        flavor: { get_input: flavor }
    relationships:
      - target: port
        type: cloudify.openstack.server_connected_to_port
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstack.nova_plugin.server.create
          inputs:
            args:
              image: { get_input: image }
              flavor: { get_input: flavor }
              userdata: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }

  port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: sg_grafana
      - type: cloudify.openstack.port_connected_to_security_group
        target: sg_kafka
      - type: cloudify.openstack.port_connected_to_security_group
        target: sg_influxdb
      - type: cloudify.openstack.port_connected_to_security_group
        target: ssh_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: public_ip

  private_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: private_subnet_name }
    relationships:
      - target: private_network
        type: cloudify.relationships.contained_in

  private_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: private_network_name }

  public_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: public_subnet_name }
    relationships:
      - target: public_network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: public_network_name }

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: router_name }
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: external_network_name }
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        users:
          - name: { get_input: agent_user }
            shell: /bin/bash
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            ssh-authorized-keys:
              - { get_secret: agent_key_public }
        runcmd:
          - [ echo, "127.0.1.1", "$(cat /etc/hostname)", '|', "sudo", "tee", "-a", "/etc/hosts", ">/dev/null" ]
          - [ echo, "nameserver 8.8.8.8", '|', sudo, tee, '-a', "/etc/resolv.conf", ">/dev/null" ]
          - [ echo, "nameserver 8.8.8.8", '|', sudo, tee, '-a', "/etc/resolvconf/resolv.conf.d/base", ">/dev/null" ]
