tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.4/plugin.yaml
  - types/gihk_types.yaml

inputs:

  influxdb_port1: #user port
    default: 8086
    type: string

  influxdb_port2: #admin port
    default: 8083
    type: string

  grafana_port: 
    default: 3000
    type: string

  image:
    type: string
    default: 6c3047c6-17b1-4aaf-a657-9229bb481e50

  flavor:
    type: string
    default: 196235bc-7ca5-4085-ac81-7e0242bda3f9

node_templates:

  sg_kafka:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      resource_id: kafka-security-group
      security_group:
        description: Security group for kafka component
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [kafka, kafka_port] }
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [kafka, zookeeper_port] }

  sg_influxdb:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      resource_id: influxdb-security-group
      security_group:
        description: Security group for influxdb component
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_input: influxdb_port1 }
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_input: influxdb_port2 }

  sg_grafana:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      resource_id: grafana-security-group
      security_group:
        description: Security group for grafana component
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_input: grafana_port }

  public_ip:
    type: cloudify.openstack.nodes.FloatingIP

  VM:
    type: cloudify.openstack.nodes.Server
    properties:
      resource_id: monitoring_general_server
      cloudify_agent:
        user: ubuntu
      server:
        image: { get_input: image }
        flavor: { get_input: flavor }
        userdata: |
          #!/bin/bash
          echo 127.0.1.1 $(cat /etc/hostname) | sudo tee -a sudo /etc/hosts >/dev/null
          echo "nameserver 8.8.8.8" | sudo tee -a sudo /etc/resolv.conf > /dev/null
          echo "nameserver 8.8.8.8" | sudo tee -a sudo /etc/resolvconf/resolv.conf.d/base > /dev/null
    relationships:
      - type: cloudify.openstack.server_connected_to_floating_ip
        target: public_ip
      - type: cloudify.openstack.server_connected_to_security_group
        target: sg_grafana
      - type: cloudify.openstack.server_connected_to_security_group
        target: sg_kafka
      - type: cloudify.openstack.server_connected_to_security_group
        target: sg_influxdb

  kafka:
    type: gihk.nodes.KafkaNode
    relationships:
      - type: cloudify.relationships.contained_in
        target: VM
      - type: cloudify.relationships.depends_on #the relationship has been set in oreder to prevent installation Collisions
        target: influxdb

  heka:
    type: gihk.nodes.HekaNode
    relationships:
      - type: cloudify.relationships.contained_in
        target: VM
      - type: cloudify.relationships.depends_on
        target: kafka
        target_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure: components/heka/scripts/configure_kafka_ip.sh
      - type: cloudify.relationships.depends_on
        target: influxdb
        target_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure: components/heka/scripts/configure_influxdb_ip.sh
      - type: cloudify.relationships.depends_on #the relationship has been set in oreder to prevent installation Collisions 
        target: grafana

  influxdb:
    type: gihk.nodes.InfluxdbNode
    relationships:
      - type: cloudify.relationships.contained_in
        target: VM

  grafana:
    type: gihk.nodes.GrafanaNode
    relationships:
      - type: cloudify.relationships.contained_in
        target: VM
      - type: cloudify.relationships.depends_on #the relationship has been set in oreder to prevent installation Collisions
        target: kafka

## the telegraf component uses for metrics sender example
  telegraf:
    type: gihk.nodes.TelegrafNode
    relationships:
      - type: cloudify.relationships.contained_in
        target: VM
      - type: cloudify.relationships.depends_on #the relationship has been set in oreder to prevent installation Collisions
        target: heka
      - type: cloudify.relationships.depends_on #the relationship has been set in oreder to prevent installation Collisions
        target: kafka
        target_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure: components/telegraf/scripts/configure_kafka_ip.sh

