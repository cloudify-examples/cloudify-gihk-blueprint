tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0.1/types.yaml
  - http://getcloudify.org.s3.amazonaws.com/spec/aws-plugin/1.4.10/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - types/gihk_types.yaml
  - imports/gihk-blueprint.yaml
  - types/cloud_config/cloud-config.yaml


inputs:

  ami:
    description: >
      An AWS AMI. Tested with a Ubuntu 14.04 image.
    default: { get_secret: ubuntu_trusty_image }

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.micro

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ubuntu

  influxdb_port1: #user port
    default: 8086
    type: string

  influxdb_port2: #admin port
    default: 8083
    type: string

  grafana_port:
    default: 3000
    type: string

dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      ec2_region_name: { get_secret: ec2_region_name }
      ec2_region_endpoint: { get_secret: ec2_region_endpoint }

node_templates:

  VM:
    type: cloudify.aws.nodes.Instance
    properties:
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
      agent_config:
        install_method: remote
        user: { get_input: agent_user }
        port: 22
        key: { get_secret: agent_key_private }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              block_device_map:
                '/dev/sda1':
                  delete_on_termination: true
              placement: { get_secret: availability_zone }
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_subnet
        target: subnet
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: sg_ssh
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: sg_grafana
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: sg_influxdb
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: sg_kafka
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: public_ip

  sg_ssh:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Puppet Group
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  sg_grafana:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Grafana Group
      rules:
        - ip_protocol: tcp
          from_port: { get_input: grafana_port }
          to_port: { get_input: grafana_port }
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  sg_influxdb:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Influx Group
      rules:
        - ip_protocol: tcp
          from_port: { get_input: influxdb_port1 }
          to_port: { get_input: influxdb_port1 }
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: { get_input: influxdb_port2 }
          to_port: { get_input: influxdb_port2 }
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  sg_kafka:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Kafka Group
      rules:
        - ip_protocol: tcp
          from_port: { get_property: [kafka, kafka_port] }
          to_port: { get_property: [kafka, kafka_port] }
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: { get_property: [kafka, zookeeper_port] }
          to_port: { get_property: [kafka, zookeeper_port] }
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  public_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: public_subnet_id }
      cidr_block: N/A
      availability_zone: N/A
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: vpc_id }
      cidr_block: N/A
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudConfig
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            cloud_config:
              users:
              - name: { get_input: agent_user }
                groups: sudo
                shell: /bin/bash
                sudo: ['ALL=(ALL) NOPASSWD:ALL']
                ssh-authorized-keys:
                - { get_secret: agent_key_public }
              runcmd:
              - [ echo, "127.0.1.1", "$(cat /etc/hostname)", '|', "sudo", "tee", "-a", "/etc/hosts", ">/dev/null" ]
              - [ echo, "nameserver 8.8.8.8", '|', sudo, tee, '-a', "/etc/resolv.conf", ">/dev/null" ]
              - [ echo, "nameserver 8.8.8.8", '|', sudo, tee, '-a', "/etc/resolvconf/resolv.conf.d/base", ">/dev/null" ]
