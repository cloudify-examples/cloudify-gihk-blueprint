dsl_definitions:

node_types:

  gihk.nodes.InfluxdbNode:
    derived_from: cloudify.nodes.DBMS
    properties:
      influxdb_admin_port: 
        type: string
        default: 8083
      influxdb_port: 
        type: string
        default: 8086
      node_fabric_env: 
        required: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: components/influxdb/scripts/create_influxdb.sh
            fabric_env: 
              default: { get_property: [SELF, node_fabric_env] }
        configure: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: components/influxdb/scripts/configure_influxdb.sh
            fabric_env:
              default: { get_property: [SELF, node_fabric_env] }
        start: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: components/influxdb/scripts/start_influxdb.sh
            fabric_env:
              default: { get_property: [SELF, node_fabric_env] }

  
  gihk.nodes.ZookeeperMasterNode:
    derived_from: cloudify.nodes.SoftwareComponent
    properties:
      zookeeper_port: 
        type: string
        default: 2181
      zookeeper_server_id: 
        type: string
        required: true
      node_fabric_env: 
        required: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: components/zookeeper/scripts/create_zookeeper.sh
            fabric_env:
              default: { get_property: [SELF, node_fabric_env] }
        configure:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: components/zookeeper/scripts/configure_zookeeper.sh
            fabric_env:
              default: { get_property: [SELF, node_fabric_env] }
        start: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: components/zookeeper/scripts/start_zookeeper.sh
            fabric_env:
              default: { get_property: [SELF, node_fabric_env] }

  gihk.nodes.KafkaMasterNode:
    derived_from: cloudify.nodes.SoftwareComponent
    properties:
      zookeeper_port: 
        type: string
        default: 2181
      kafka_port: 
        type: string
        default: 9092
      zookeeper_server_id: 
        type: string
        required: true
      node_fabric_env: 
        required: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create: {}
        configure: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: components/kafka/scripts/configure_kafka.sh
            fabric_env:
              default: { get_property: [SELF, node_fabric_env] }
        start: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: components/kafka/scripts/start_kafka.sh
            fabric_env:
              default: { get_property: [SELF, node_fabric_env] }

  gihk.nodes.HekaNode:
    derived_from: cloudify.nodes.SoftwareComponent
    properties:
      kafka_master_port: 
        type: string
        default: { get_property: [kafka_master, kafka_port] }
      kafka_slave_port: 
        type: string
        default: { get_property: [kafka_slave, kafka_port] }
      influxdb_port: 
        type: string
        default: 8086
      node_fabric_env: 
        required: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: components/heka/scripts/create_heka.sh
            fabric_env:
              default: { get_property: [SELF, node_fabric_env] }
        configure: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: components/heka/scripts/configure_heka.sh
            fabric_env:
              default: { get_property: [SELF, node_fabric_env] }              
        start: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: components/heka/scripts/start_heka.sh
            fabric_env:
              default: { get_property: [SELF, node_fabric_env] }            

  gihk.nodes.GrafanaNode:
    derived_from: cloudify.nodes.ApplicationServer
    properties:
      grafana_port: 
        type: string
        default: { get_input: grafana_port }
      datasource_ip:
        required: true
      node_fabric_env: 
        required: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: components/grafana/scripts/create_grafana.sh
            fabric_env: 
              default: { get_property: [SELF, node_fabric_env] }
        configure: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: components/grafana/scripts/configure_grafana.sh
            fabric_env: 
              default: { get_property: [SELF, node_fabric_env] }
        start: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: components/grafana/scripts/start_grafana.sh
            fabric_env:
              default: { get_property: [SELF, node_fabric_env] }
            influxdb_port: 
              default: 8086
            datasource_ip:
              default: { get_property: [SELF, datasource_ip] }
            grafana_port:
              default: { get_input: grafana_port } 

  gihk.nodes.TelegrafNode:
    derived_from: cloudify.nodes.SoftwareComponent
    properties:
      kafka_port: 
        type: string
        default: { get_property: [kafka_master, kafka_port] }
      node_fabric_env: 
        required: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: components/telegraf/scripts/create_telegraf.sh
            fabric_env: 
              default: { get_property: [SELF, node_fabric_env] }
        configure: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: components/telegraf/scripts/configure_telegraf.sh
            fabric_env:
              default: { get_property: [SELF, node_fabric_env] }              
        start: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: components/telegraf/scripts/start_telegraf.sh
            fabric_env: 
              default: { get_property: [SELF, node_fabric_env] }

relationships:

  gihk.relationships.ConfigureIp:
    derived_from: cloudify.relationships.depends_on
    target_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        preconfigure: components/general_scripts/configure_ip.sh

  gihk.relationships.SetNodeInVM:
    derived_from: cloudify.relationships.contained_in
    target_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        preconfigure: components/general_scripts/configure_ip.sh
